# Code to read input file
input_dataset<-read.csv(file.choose(),header = FALSE)
# Count the number of items every user buys for general information to set k value
matrix_counts<-apply(input_dataset, 1, function(c)sum(c!=0))
# Remove all zero rows
new_dataset <- input_dataset
for (i in 1:nrow(input_dataset)){
y =(sum(input_dataset[i,]))
if(y==0){
new_dataset<-new_dataset[-i,]
}
}
nrow(new_dataset)
new_dataset
nrow(new_dataset)
mylist<-c()
head(new_dataset)
for (i in 1:nrow(new_dataset)){
for (j in 1:ncol(new_dataset)){
if(new_dataset[i,j]==1){
val=j
mylist=c(mylist,val)
}
}
}
print(mylist)
# Conveting to Table
mylist_table<-table(mylist)
print(mylist_table)
# converting contingency table to Data Frame
item_1<-as.data.frame(mylist_table)
colnames(item_1)<-c("Product","Cnt")
item_1
summary(item_1)
#Generate size 1 Freq item sets with min sup = 3
item_1_new<-item_1[which(item_1$Cnt>=40),]
nrow(item_1_new)
item_1_new
nrow(item_1_new)
freq_df<-data.frame(item_1_new)
colnames(freq_df)<-c("Product","Cnt")
ncol(freq_df)
nrow(freq_df) # freq_df is the set of all 1-freq itemsets with their support counts
freq_df
itemset_size=2
xxx<-new_dataset
k_one<-function(new_dataset){
xxx<-data.frame(combn(as.vector(item_1$Product),itemset_size))
xxx<-data.frame(t(xxx))
c_values<-c()
# Addind a Count col to the Data Frame
xxx$Cnt <- 0
yyy<- as.matrix(xxx)
flag=0
for (i in 1:nrow(yyy)){
flag=0
for (j in 1:nrow(new_dataset)){
flag=0
for (iter in 1:itemset_size){
if(new_dataset[j,as.numeric(yyy[i,iter])]!=1){
flag=1
}
}
if(flag==0){
xxx[i,ncol(xxx)]=xxx[i,ncol(xxx)]+1
}
#if (new_dataset[j,as.numeric(yyy[i,1])]==1 & new_dataset[j,as.numeric(yyy[i,2])]==1){
# xxx[i,ncol(xxx)]=xxx[i,ncol(xxx)]+1
}
}
# Frequent 1 Itemsets
xxx<-xxx[which(xxx$Cnt>=3),]
return(xxx)
}
# freq_df is the set of all K-1 freq itemsets with their support counts
my_ds<-k_one(new_dataset)
xxx
library(dplyr)
# Code to read input file
input_dataset<-read.csv(file.choose(),header = FALSE)
# Count the number of items every user buys for general information to set k value
matrix_counts<-apply(input_dataset, 1, function(c)sum(c!=0))
# Remove all zero rows
new_dataset <- input_dataset
for (i in 1:nrow(input_dataset)){
y =(sum(input_dataset[i,]))
if(y==0){
new_dataset<-new_dataset[-i,]
}
}
nrow(new_dataset)
# Implementing F k and F K-1 Apriori Algorithm
# Generate Size 1 itemsets
mylist<-c()
head(new_dataset)
for (i in 1:nrow(new_dataset)){
for (j in 1:ncol(new_dataset)){
if(new_dataset[i,j]==1){
val=j
mylist=c(mylist,val)
}
}
}
# Conveting to Table
mylist_table<-table(mylist)
print(mylist_table)
# converting contingency table to Data Frame
item_1<-as.data.frame(mylist_table)
colnames(item_1)<-c("Product","Cnt")
summary(item_1)
#Generate size 1 Freq item sets with min sup = 3
item_1_new<-item_1[which(item_1$Cnt>=20),]
nrow(item_1_new)
# Converting Table to Data Frame
freq_df<-data.frame(item_1_new)
colnames(freq_df)<-c("Product","Cnt")
ncol(freq_df)
nrow(freq_df) # freq_df is the set of all 1-freq itemsets with their support counts
itemset_size=2
xxx<-new_dataset
k_one<-function(new_dataset){
xxx<-data.frame(combn(as.vector(item_1$Product),itemset_size))
xxx<-data.frame(t(xxx))
c_values<-c()
# Addind a Count col to the Data Frame
xxx$Cnt <- 0
yyy<- as.matrix(xxx)
flag=0
for (i in 1:nrow(yyy)){
flag=0
for (j in 1:nrow(new_dataset)){
flag=0
for (iter in 1:itemset_size){
if(new_dataset[j,as.numeric(yyy[i,iter])]!=1){
flag=1
}
}
if(flag==0){
xxx[i,ncol(xxx)]=xxx[i,ncol(xxx)]+1
}
#if (new_dataset[j,as.numeric(yyy[i,1])]==1 & new_dataset[j,as.numeric(yyy[i,2])]==1){
# xxx[i,ncol(xxx)]=xxx[i,ncol(xxx)]+1
}
}
# Frequent 1 Itemsets
xxx<-xxx[which(xxx$Cnt>=3),]
return(xxx)
}
# freq_df is the set of all K-1 freq itemsets with their support counts
my_ds<-k_one(new_dataset)
my_ds
sup=5
# Code to read input file
input_dataset<-read.csv(file.choose(),header = FALSE)
# Count the number of items every user buys for general information to set k value
matrix_counts<-apply(input_dataset, 1, function(c)sum(c!=0))
# Remove all zero rows
new_dataset <- input_dataset
for (i in 1:nrow(input_dataset)){
y =(sum(input_dataset[i,]))
if(y==0){
new_dataset<-new_dataset[-i,]
}
}
nrow(new_dataset)
# Implementing F k and F K-1 Apriori Algorithm
# Generate Size 1 itemsets
mylist<-c()
for (i in 1:nrow(new_dataset)){
for (j in 1:ncol(new_dataset)){
if(new_dataset[i,j]==1){
val=j
mylist=c(mylist,val)
}
}
}
# Conveting to Table
mylist_table<-table(mylist)
print(mylist_table)
# converting contingency table to Data Frame
item_1<-as.data.frame(mylist_table)
colnames(item_1)<-c("Product","Cnt")
summary(item_1)
#Generate size 1 Freq item sets with min sup = 3
sup=5
item_1_new<-item_1[which(item_1$Cnt>=sup),]
nrow(item_1_new)
# Converting Table to Data Frame
freq_df<-data.frame(item_1_new)
colnames(freq_df)<-c("Product","Cnt")
ncol(freq_df)
nrow(freq_df) # freq_df is the set of all 1-freq itemsets with their support counts
# Generate K-1 Frequent itemsets
# When K = 2
itemset_size=2
xxx<-new_dataset
k_one<-function(new_dataset){
xxx<-data.frame(combn(as.vector(item_1$Product),itemset_size))
xxx<-data.frame(t(xxx))
c_values<-c()
# Addind a Count col to the Data Frame
xxx$Cnt <- 0
yyy<- as.matrix(xxx)
flag=0
for (i in 1:nrow(yyy)){
flag=0
for (j in 1:nrow(new_dataset)){
flag=0
for (iter in 1:itemset_size){
if(new_dataset[j,as.numeric(yyy[i,iter])]!=1){
flag=1
}
}
if(flag==0){
xxx[i,ncol(xxx)]=xxx[i,ncol(xxx)]+1
}
#if (new_dataset[j,as.numeric(yyy[i,1])]==1 & new_dataset[j,as.numeric(yyy[i,2])]==1){
# xxx[i,ncol(xxx)]=xxx[i,ncol(xxx)]+1
}
}
# Frequent 1 Itemsets
xxx<-xxx[which(xxx$Cnt>=sup),]
return(xxx)
}
# freq_df is the set of all K-1 freq itemsets with their support counts
my_ds<-k_one(new_dataset)
my_ds
# Now generate K Freq item sets
one_set<-as.matrix(freq_df[-ncol(freq_df)])
k_minus_set<-as.matrix(my_ds[-ncol(my_ds)])
flag2=1
myvec<-c()
result_df <- data.frame(matrix(0, ncol = itemset_size+1, nrow = 1))
result_df<-result_df[-1,]
for (rows in 1:nrow(k_minus_set)){
flag2=0
for(line in 1:nrow(one_set)){
flag2=0
for (iter in 1:itemset_size){
if((k_minus_set[rows,iter] == one_set[line,1])){
flag2=1
}
}
if(flag2==0){
myvec<-c()
for (iter in 1:itemset_size){
myvec<-c(myvec,as.numeric(k_minus_set[rows,iter]))
}
myvec<-c(myvec,as.numeric(one_set[line,1]))
result_df= rbind(result_df,myvec)
#result_df= rbind(result_df,data.frame(A1=as.numeric(k_minus_set[rows,1]),A2=as.numeric(k_minus_set[rows,2]),A3=as.numeric(one_set[line,1])))
}
}
}
print(result_df)
for (i in 1:nrow(result_df)){
result_df[i,]<-sort(result_df[i,])
}
result_df<-unique(result_df)
result_df
result_df$Cnt<-0
all_result<-result_df
flag3=0
temp<-as.matrix(result_df)
for (i in 1:nrow(result_df)){
flag3=0
for (j in 1:nrow(new_dataset)){
flag3=0
for (iter in 1:itemset_size+1){
if(new_dataset[j,as.numeric(temp[i,iter])]!=1){
flag3=1
}
}
if(flag3==0){
all_result[i,ncol(all_result)]=all_result[i,ncol(all_result)]+1
}
}
}
all_result[,ncol(all_result)] = all_result[,ncol(all_result)]-1
all_result
result_df$Cnt<-0
all_result<-result_df
flag3=0
temp<-as.matrix(result_df)
for (i in 1:nrow(result_df)){
flag3=0
for (j in 1:nrow(new_dataset)){
flag3=0
for (iter in 1:itemset_size+1){
if(new_dataset[j,as.numeric(temp[i,iter])]!=1){
flag3=1
}
}
if(flag3==0){
all_result[i,ncol(all_result)]=all_result[i,ncol(all_result)]+1
}
}
}
all_result
all_result<-all_result[which(all_result$Cnt>=sup),]
all_result
ds02<-k_one(new_dataset)
my_ds02<-ds02[-ncol(ds02)]
ds03<-k_one(new_dataset)
my_ds03<-ds03[-ncol(ds03)]
ds02
my_ds02
ds03
my_ds03
kk_set <- data.frame(matrix(0, ncol = 2*(itemset_size), nrow = 1))
kk_set
for(r2 in 1:nrow(my_ds02)){
for(r3 in 1:nrow(my_ds03)){
if(as.matrix(my_ds02[r2,1])!=as.matrix(my_ds03[r3,1])){
kkvec<-c(as.matrix(my_ds02[r2,]),as.matrix(my_ds03[r3,]))
kk_set<-rbind(kk_set,kkvec)
}
}
}
kk_set
for (r in 1:nrow(kk_set)){
kk_set[r,]<-sort(kk_set[r,])
}
kk_set<-unique(kk_set[-1,])
kk_set
kk_matrix<-as.matrix(kk_set)
val_vec<-c()
ksets<-data.frame()
for (rows in 1:nrow(kk_set)){
val_vec<-c(val_vec,kk_matrix[rows,])
val_vec<-unique(val_vec)
temp_ds<-t(combn(val_vec,itemset_size+1))
ksets<-rbind(ksets,data.frame(temp_ds))
}
ksets
uniq_ksets<-unique(ksets)
uniq_ksets
uniq_ksets$Cnt<-0
uniq_ksetsresult<-uniq_ksets
flag4=0
temp1<-as.matrix(uniq_ksets)
for (i in 1:nrow(uniq_ksets)){
flag4=0
for (j in 1:nrow(new_dataset)){
flag4=0
for (iter in 1:itemset_size+1){
if(new_dataset[j,as.numeric(temp1[i,iter])]!=1){
flag4=1
}
}
if(flag4==0){
uniq_ksetsresult[i,ncol(uniq_ksetsresult)]=uniq_ksetsresult[i,ncol(uniq_ksetsresult)]+1
}
}
}
uniq_ksetsresult<-uniq_ksetsresult[which(uniq_ksetsresult$Cnt>=sup),]
uniq_ksetsresult
